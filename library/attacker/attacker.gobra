package attacker

import tm "github.com/ModularVerification/ReusableVerificationLibrary/term"
import tr "github.com/ModularVerification/ReusableVerificationLibrary/trace"

ghost
decreases
pure func attackerKnows(entry tr.TraceEntry, term tm.Term) bool {
    return term in attackerKnowledge(entry)
}

ghost
decreases
requires attackerKnows(t1, term)
requires t1.isSuffix(t2)
ensures  attackerKnows(t2, term)
func attackerKnowsMonotonic(t1, t2 tr.TraceEntry, term tm.Term) bool {
    t1.getPublicTermsMonotonic(t2)
    t1.getMessagePayloadsMonotonic(t2)
    t1.getTermsMadePublicMonotonic(t2)
}

ghost
decreases
pure func isUnknownToAttacker(entry tr.TraceEntry, term tm.Term) bool {
    return !attackerKnows(entry, term)
}

ghost
decreases
pure func attackerKnowledge(entry tr.TraceEntry) set[tm.Term] {
    return entry.getPublicTerms() union entry.getMessagePayloads() union entry.getTermsMadePublic()
}
