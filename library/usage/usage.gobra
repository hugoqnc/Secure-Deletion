package usage


type Usage domain {
    // constructors
    // type 0
    func PkeKey(string) Usage
    // type 1
    func DhKey(string) Usage
    // type 2
    func Nonce(string) Usage
    // type 3
    func AeadKey(string) Usage
    // type 4
    /** denotes that a key is meant as input to a KDF function */
    func KdfKey(string) Usage
    // type 5
    func SigningKey(string) Usage

    // WARNING: adapt first axiom if another Usage is added!

    // deconstructors
    func GetUsageType(Usage) int
    func GetUsageString(Usage) string

    axiom { // every usage belongs to a known type
        forall u Usage :: { GetUsageType(u) } 0 <= GetUsageType(u) && GetUsageType(u) <= 5
    }

    axiom { // PkeKey is injective
        forall s string :: { PkeKey(s) } GetUsageType(PkeKey(s)) == 0 &&
            GetUsageString(PkeKey(s)) == s
    }
    axiom { // PkeKey implies its construction
        forall u Usage :: { GetUsageType(u) } GetUsageType(u) == 0 ==> u == PkeKey(GetUsageString(u))
    }

    axiom { // DhKey is injective
        forall s string :: { DhKey(s) } GetUsageType(DhKey(s)) == 1 &&
            GetUsageString(DhKey(s)) == s
    }
    axiom { // DhKey implies its construction
        forall u Usage :: { GetUsageType(u) } GetUsageType(u) == 1 ==> u == DhKey(GetUsageString(u))
    }

    axiom { // Nonce is injective
        forall s string :: { Nonce(s) } GetUsageType(Nonce(s)) == 2 &&
            GetUsageString(Nonce(s)) == s
    }
    axiom { // Nonce implies its construction
        forall u Usage :: { GetUsageType(u) } GetUsageType(u) == 2 ==> u == Nonce(GetUsageString(u))
    }

    axiom { // AeadKey is injective
        forall s string :: { AeadKey(s) } GetUsageType(AeadKey(s)) == 3 &&
            GetUsageString(AeadKey(s)) == s
    }
    axiom { // AeadKey implies its construction
        forall u Usage :: { GetUsageType(u) } GetUsageType(u) == 3 ==> u == AeadKey(GetUsageString(u))
    }

    axiom { // KdfKey is injective
        forall s string :: { KdfKey(s) } GetUsageType(KdfKey(s)) == 4 &&
            GetUsageString(KdfKey(s)) == s
    }
    axiom { // KdfKey implies its construction
        forall u Usage :: { GetUsageType(u) } GetUsageType(u) == 4 ==> u == KdfKey(GetUsageString(u))
    }

    axiom { // SigningKey is injective
        forall s string :: { SigningKey(s) } GetUsageType(SigningKey(s)) == 5 &&
            GetUsageString(SigningKey(s)) == s
    }
    axiom { // SigningKey implies its construction
        forall u Usage :: { GetUsageType(u) } GetUsageType(u) == 5 ==> u == SigningKey(GetUsageString(u))
    }
}

ghost
decreases
pure func (u Usage) IsPkeKey() bool {
    return GetUsageType(u) == 0
}

ghost
decreases
pure func (u Usage) IsDhKey() bool {
    return GetUsageType(u) == 1
}

ghost
decreases
pure func (u Usage) IsNonce() bool {
    return GetUsageType(u) == 2
}

ghost
decreases
pure func (u Usage) IsAeadKey() bool {
    return GetUsageType(u) == 3
}

ghost
decreases
pure func (u Usage) IsKdfKey() bool {
    return GetUsageType(u) == 4
}

ghost
decreases
pure func (u Usage) IsSigningKey() bool {
    return GetUsageType(u) == 5
}
