package labeling

import "github.com/ModularVerification/ReusableVerificationLibrary/label"
import p "github.com/ModularVerification/ReusableVerificationLibrary/principal"
import tm "github.com/ModularVerification/ReusableVerificationLibrary/term"
import tr "github.com/ModularVerification/ReusableVerificationLibrary/trace"
import u "github.com/ModularVerification/ReusableVerificationLibrary/usage"


ghost
decreases
requires ctx.Props()
// the required label is Meet(bJoinAL, bJoinAL)
requires ctx.IsLabeledRelaxed(snapshot, term, label.Join(label.Readers(set[p.Id]{ bId }), label.Readers(set[p.Id]{ aId })))
ensures ctx.IsLabeledRelaxed(snapshot, term, label.Readers(set[p.Id]{ aId, bId }))
func (ctx LabelingContext) SimplifyJoinToReaders(snapshot tr.TraceEntry, term tm.Term, aId, bId p.Id) {
    bothL := label.Readers(set[p.Id]{ aId, bId })
    bJoinAL := label.Join(label.Readers(set[p.Id]{ bId }), label.Readers(set[p.Id]{ aId }))
    actualL := ctx.GetLabel(term)
    ctx.CanFlowToSubsetReaders(snapshot, bothL, label.Readers(set[p.Id]{ aId }))
    ctx.CanFlowToSubsetReaders(snapshot, bothL, label.Readers(set[p.Id]{ bId }))
    ctx.CanFlowTransitive(snapshot, bothL, bJoinAL, actualL)
    // note that bJoinAL does not flow to bothL
}

ghost
decreases
requires ctx.Props()
// the required label is Meet(bJoinAL, bJoinAL)
requires ctx.IsLabeledRelaxed(snapshot, term, label.Join(label.Readers(readers1), label.Readers(readers2)))
ensures ctx.IsLabeledRelaxed(snapshot, term, label.Readers(readers1 union readers2))
func (ctx LabelingContext) SimplifyJoinToReadersSet(snapshot tr.TraceEntry, term tm.Term, readers1, readers2 set[p.Id]) {
    bothL := label.Readers(readers1 union readers2)
    bJoinAL := label.Join(label.Readers(readers1), label.Readers(readers2))
    actualL := ctx.GetLabel(term)
    ctx.CanFlowToSubsetReaders(snapshot, bothL, label.Readers(readers1))
    ctx.CanFlowToSubsetReaders(snapshot, bothL, label.Readers(readers2))
    ctx.CanFlowTransitive(snapshot, bothL, bJoinAL, actualL)
    // note that bJoinAL does not flow to bothL
}

ghost
decreases
requires ctx.Props()
requires ctx.IsSecretPrecise(snapshot, term, label.Meet(l, l), usage)
ensures ctx.IsSecretPrecise(snapshot, term, l, usage)
func (ctx LabelingContext) SimplifySymMeet(snapshot tr.TraceEntry, term tm.Term, l label.SecrecyLabel, usage u.Usage) {
    inputL := label.Meet(l, l)
    actualL := ctx.GetLabel(term)
    ctx.CanFlowReflexive(snapshot, l)
    ctx.CanFlowTransitive(snapshot, actualL, inputL, l)
}

ghost
decreases
requires ctx.Props()
requires ctx.CanFlow(snapshot, l2, l1)
requires ctx.IsLabeledPrecise(snapshot, term, label.Meet(l1, l2))
ensures ctx.IsLabeledPrecise(snapshot, term, l1)
func (ctx LabelingContext) SimplifySimilarMeet(snapshot tr.TraceEntry, term tm.Term, l1, l2 label.SecrecyLabel) {
    inputL := label.Meet(l1, l2)
    actualL := ctx.GetLabel(term)
    ctx.CanFlowReflexive(snapshot, l1)
    ctx.CanFlowCreateMeetLhs(snapshot, l1, l2, l1)
    ctx.CanFlowTransitive(snapshot, actualL, inputL, l1)
    ctx.CanFlowCreateMeetRhs(snapshot, l1, l1, l2)
    ctx.CanFlowTransitive(snapshot, l1, inputL, actualL)
}

ghost
decreases
ensures ctx.CanFlow(snapshot, label.Readers(set[p.Id]{ sessId.getPrincipalId() }), label.Readers(set[p.Id]{ sessId }))
func (ctx LabelingContext) PrincipalFlowsToSession(snapshot tr.TraceEntry, sessId p.Id) {
    // the following assert stmt is necessary:
    assert sessId.getPrincipalId().Covers(sessId)
}

ghost
decreases
ensures ctx.CanFlow(snapshot, label.Readers(set[p.Id]{ aSessId.getPrincipalId(), bSessId }), label.Readers(set[p.Id]{ aSessId, bSessId }))
ensures ctx.CanFlow(snapshot, label.Readers(set[p.Id]{ aSessId, bSessId.getPrincipalId() }), label.Readers(set[p.Id]{ aSessId, bSessId }))
ensures ctx.CanFlow(snapshot, label.Readers(set[p.Id]{ aSessId.getPrincipalId(), bSessId.getPrincipalId() }), label.Readers(set[p.Id]{ aSessId, bSessId }))
func (ctx LabelingContext) PrincipalsFlowsToSession(snapshot tr.TraceEntry, aSessId, bSessId p.Id) {
    ctx.PrincipalsFlowsToSession1(snapshot, aSessId, bSessId)
    ctx.PrincipalsFlowsToSession1(snapshot, bSessId, aSessId)
    assert set[p.Id]{ aSessId, bSessId.getPrincipalId() } == set[p.Id]{ bSessId.getPrincipalId(), aSessId }
    ctx.PrincipalsFlowsToSession2(snapshot, aSessId, bSessId)
}

ghost
decreases
ensures ctx.CanFlow(snapshot, label.Readers(set[p.Id]{ aSessId.getPrincipalId(), bSessId }), label.Readers(set[p.Id]{ aSessId, bSessId }))
func (ctx LabelingContext) PrincipalsFlowsToSession1(snapshot tr.TraceEntry, aSessId, bSessId p.Id) {
    ctx.PrincipalsIncludeSessions(aSessId, bSessId)
}

ghost
decreases
ensures ctx.CanFlow(snapshot, label.Readers(set[p.Id]{ aSessId.getPrincipalId(), bSessId.getPrincipalId() }), label.Readers(set[p.Id]{ aSessId, bSessId }))
func (ctx LabelingContext) PrincipalsFlowsToSession2(snapshot tr.TraceEntry, aSessId, bSessId p.Id) {
    ctx.PrincipalsIncludeSessions(aSessId, bSessId)
}

ghost
decreases
ensures includesIds(set[p.Id]{ aSessId.getPrincipalId(), bSessId }, set[p.Id]{ aSessId, bSessId })
ensures includesIds(set[p.Id]{ aSessId.getPrincipalId(), bSessId.getPrincipalId() }, set[p.Id]{ aSessId, bSessId })
func (ctx LabelingContext) PrincipalsIncludeSessions(aSessId, bSessId p.Id) {
    // these steps are inspired by `includesIdsSubset`
    aSessId.getPrincipalId().CoversReflexive()
    bSessId.CoversReflexive()
    assert aSessId.getPrincipalId().Covers(aSessId)
    assert bSessId.getPrincipalId().Covers(bSessId)
    aSessId.CoversReflexive()
}

ghost
decreases
ensures lhsL == label.Join(label.Readers(set[p.Id]{ aSessId.getPrincipalId() }), label.Readers(set[p.Id]{ bId }))
ensures rhsL == label.Join(label.Readers(set[p.Id]{ aSessId }), label.Readers(set[p.Id]{ bId }))
ensures ctx.CanFlow(snapshot, lhsL, rhsL)
ensures ctx.IsJoinOfReaders(lhsL) && ctx.IsJoinOfReaders(rhsL)
ensures ctx.ReaderUnionFromJoin(lhsL) == label.Readers(set[p.Id]{ aSessId.getPrincipalId(), bId })
ensures ctx.ReaderUnionFromJoin(rhsL) == label.Readers(set[p.Id]{ aSessId, bId })
func (ctx LabelingContext) PrincipalsJoinFlowsToSessions(snapshot tr.TraceEntry, aSessId, bId p.Id) (lhsL, rhsL label.SecrecyLabel) {
    aL := label.Readers(set[p.Id]{ aSessId.getPrincipalId() })
    aSessL := label.Readers(set[p.Id]{ aSessId })
    bL := label.Readers(set[p.Id]{ bId })
    lhsL = label.Join(aL, bL)
    rhsL = label.Join(aSessL, bL)
    ctx.PrincipalFlowsToSession(snapshot, aSessId)
    ctx.CanFlowReflexive(snapshot, bL)
    ctx.CanFlowCreateJoinBoth(snapshot, aL, aSessL, bL, bL)
    // the following lemma calls are necessary to show that the postconditions
    // involving `ReaderUnionFromJoin` hold:
    ctx.ShowReaderUnionFromJoin(aSessId.getPrincipalId(), bId)
    ctx.ShowReaderUnionFromJoin(aSessId, bId)
}

ghost
decreases
ensures lhsL == label.Join(label.Readers(set[p.Id]{ aSessId }), label.Readers(set[p.Id]{ bSessId.getPrincipalId() }))
ensures rhsL == label.Join(label.Readers(set[p.Id]{ aSessId }), label.Readers(set[p.Id]{ bSessId }))
ensures ctx.CanFlow(snapshot, lhsL, rhsL)
ensures ctx.IsJoinOfReaders(lhsL) && ctx.IsJoinOfReaders(rhsL)
ensures ctx.ReaderUnionFromJoin(lhsL) == label.Readers(set[p.Id]{ aSessId, bSessId.getPrincipalId() })
ensures ctx.ReaderUnionFromJoin(rhsL) == label.Readers(set[p.Id]{ aSessId, bSessId })
func (ctx LabelingContext) PrincipalsJoinFlowsToBSessions(snapshot tr.TraceEntry, aSessId, bSessId p.Id) (lhsL, rhsL label.SecrecyLabel) {
    aSessL := label.Readers(set[p.Id]{ aSessId })
    bL := label.Readers(set[p.Id]{ bSessId.getPrincipalId() })
    bSessL := label.Readers(set[p.Id]{ bSessId })
    lhsL = label.Join(aSessL, bL)
    rhsL = label.Join(aSessL, bSessL)
    ctx.PrincipalFlowsToSession(snapshot, bSessId)
    ctx.CanFlowReflexive(snapshot, aSessL)
    ctx.CanFlowCreateJoinBoth(snapshot, aSessL, aSessL, bL, bSessL)
    // the following lemma calls are necessary to show that the postconditions
    // involving `ReaderUnionFromJoin` hold:
    ctx.ShowReaderUnionFromJoin(aSessId, bSessId.getPrincipalId())
    ctx.ShowReaderUnionFromJoin(aSessId, bSessId)
}

ghost
decreases
ensures ctx.ReaderUnionFromJoin(label.Join(label.Readers(set[p.Id]{ id1 }), label.Readers(set[p.Id]{ id2 }))) == label.Readers(set[p.Id]{ id1, id2 })
func (ctx LabelingContext) ShowReaderUnionFromJoin(id1, id2 p.Id) {
    lhsL := label.Readers(set[p.Id]{ id1 })
    rhsL := label.Readers(set[p.Id]{ id2 })
    joinL := label.Join(lhsL, rhsL)
    if label.GetFirstLabel(joinL) == lhsL {
        assert set[p.Id]{ id1, id2 } == set[p.Id]{ id1 } union set[p.Id]{ id2 }
    } else {
        assert label.GetFirstLabel(joinL) == rhsL
        assert label.GetSecondLabel(joinL) == lhsL
        assert set[p.Id]{ id2, id1 } == set[p.Id]{ id2 } union set[p.Id]{ id1 }
        assert set[p.Id]{ id1, id2 } == set[p.Id]{ id2, id1 }
    }
}

ghost
decreases
/** helper function that checks whether l == Join(Readers(set1), Readers(set2)) for some set1 and set2 */
pure func (ctx LabelingContext) IsJoinOfReaders(l label.SecrecyLabel) bool {
    return l.IsJoin() &&
        label.GetFirstLabel(l).IsReaders() &&
        label.GetSecondLabel(l).IsReaders()
}

ghost
decreases
requires ctx.IsJoinOfReaders(l)
/** helper function to convert l == Join(Readers(set1), Readers(set2)) for some set1 and set2 to Readers(set1 union set2) */
pure func (ctx LabelingContext) ReaderUnionFromJoin(l label.SecrecyLabel) label.SecrecyLabel {
    return label.Readers(label.GetReaders(label.GetFirstLabel(l)) union label.GetReaders(label.GetSecondLabel(l)))
}
