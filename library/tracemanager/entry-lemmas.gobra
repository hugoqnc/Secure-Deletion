package tracemanager

import tr "github.com/ModularVerification/ReusableVerificationLibrary/trace"
import tri "github.com/ModularVerification/ReusableVerificationLibrary/traceinvariant"


type EntrySearcher struct {
    ctx tri.TraceContext
    entry tr.TraceEntry
}
EntrySearcher implements TraceSearcher

ghost
decreases
pure func (es EntrySearcher) Props() bool {
    return es.ctx != nil && es.ctx.Props()
}

ghost
decreases
requires es.Props()
ensures  res != nil && res.Props()
pure func (es EntrySearcher) Ctx() (res tri.TraceContext) {
    return es.ctx
}

ghost
decreases
pure func (es EntrySearcher) Matches(entry tr.TraceEntry) bool {
    return entry == es.entry
}

ghost
decreases
requires entry.isSuffix(snapshot)
requires es.Matches(entry)
pure func (es EntrySearcher) MatchProperties(snapshot, entry tr.TraceEntry) bool {
    return true
}

ghost
decreases
pure func (es EntrySearcher) Occurs(entry tr.TraceEntry) bool {
    return es.entry.isSuffix(entry)
}

ghost
decreases
requires es.Props()
pure func (es EntrySearcher) PureEntryInv(entry tr.TraceEntry) bool {
    return es.entry.isEvent() ==> es.ctx.pureEventInv(tr.getPrincipal(es.entry), tr.getEvent(es.entry), tr.getPrev(entry))
}

ghost
decreases
requires es.Matches(entry)
ensures  es.MatchProperties(entry, entry)
func (es EntrySearcher) MatchPropertiesReflexive(snapshot, entry tr.TraceEntry) {
    // no body needed
}

ghost
decreases
requires entry.isSuffix(snapshot)
requires es.Matches(entry)
requires !es.Matches(snapshot)
requires es.MatchProperties(tr.getPrev(snapshot), entry)
ensures  es.MatchProperties(snapshot, entry)
func (es EntrySearcher) MatchPropertiesTransitive(snapshot, entry tr.TraceEntry) {
    // no body needed
}

ghost
decreases
requires es.Occurs(entry)
ensures  (!entry.isRoot() && es.Occurs(tr.getPrev(entry))) || es.Matches(entry)
func (es EntrySearcher) OccursImpliesAnEventualMatch(entry tr.TraceEntry) {
    // no body needed
}

ghost
decreases
requires noPerm < p && p <= writePerm
requires es.Props()
requires es.Matches(entry)
requires acc(tri.validTrace(es.Ctx(), entry), p)
ensures  es.PureEntryInv(entry)
ensures  acc(tri.validTrace(es.Ctx(), entry), p)
func (es EntrySearcher) ExtractPureEntryInv(entry tr.TraceEntry, p perm) {
    unfold acc(tri.validTrace(es.Ctx(), entry), p)
    if es.entry.isEvent() {
        es.Ctx().getPureEventInv(tr.getPrincipal(es.entry), tr.getEvent(es.entry), tr.getPrev(entry), p)
    }
    fold acc(tri.validTrace(es.Ctx(), entry), p)
}
// end of EntrySearcher's implementation
