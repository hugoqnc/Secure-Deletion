package attackercompleteness

import arb "github.com/ModularVerification/ReusableVerificationLibrary/arbitrary"
import att "github.com/ModularVerification/ReusableVerificationLibrary/attacker"
import ev "github.com/ModularVerification/ReusableVerificationLibrary/event"
import "github.com/ModularVerification/ReusableVerificationLibrary/label"
import ll "github.com/ModularVerification/ReusableVerificationLibrary/labeledlibrary"
import lib "github.com/ModularVerification/ReusableVerificationLibrary/labeledlibrary/library"
import "github.com/ModularVerification/ReusableVerificationLibrary/labeling"
import p "github.com/ModularVerification/ReusableVerificationLibrary/principal"
import tm "github.com/ModularVerification/ReusableVerificationLibrary/term"
import tr "github.com/ModularVerification/ReusableVerificationLibrary/trace"
import tri "github.com/ModularVerification/ReusableVerificationLibrary/traceinvariant"
import u "github.com/ModularVerification/ReusableVerificationLibrary/usage"


/**
 * This file shows that the attacker can use the same functionality as the 
 * labeledlibrary, i.e. the attacker can invoke all library functions with
 * terms known to him (i.e. public/derivable terms) and will get back terms
 * (e.g. the ciphertext in the case of encrypt) that are also derivable.
 * This shows that `IsPublishable(t, term)` is a valid invariant for every
 * `term` in the the attacker knowledge, i.e. all terms the attacker can
 * derive satisfy this invariant. Furthermore, we show record all attacker
 * performed operations on the trace and thus prove that the attacker
 * maintains the trace invariant. We call all these properties together the
 * attacker completeness.
 */

ghost
requires l.Mem()
ensures  l.Mem()
func Attacker(l *ll.LabeledLibrary) {
    invariant l.Mem()
    for {
        // the attacker chooses non-deterministically an operation it wants to perform
        nonDeterministicChoice := arb.GetArbInt()
        if nonDeterministicChoice == 1 {
            CreateNonce(l, arb.GetArbString())
        } else if nonDeterministicChoice == 2 {
            // the attacker chooses an arbitrary sender & receiver and takes a message from its knowledge:
            arbSender := arb.GetArbPrincipal()
            arbReceiver := arb.GetArbPrincipal()
            arbMsg := arb.GetArbTerm()
            assume att.attackerKnows(l.Snapshot(), arbMsg)
            Send(l, arbSender, arbReceiver, arbMsg)
        } else if nonDeterministicChoice == 3 {
            // there is only a single root entry at the very beginning of the trace so we skip this operation
        } else if nonDeterministicChoice == 4 {
            // we take 7 arbitrary terms from the attacker knowledge and call `ExtendKnowledge`
            // that internally does a non-deterministic choice over all possible terms
            t1, t2, t3, t4, t5, t6, t7, t8 := arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm()
            assume att.attackerKnows(l.Snapshot(), t1) && att.attackerKnows(l.Snapshot(), t2) && att.attackerKnows(l.Snapshot(), t3) && att.attackerKnows(l.Snapshot(), t4) && att.attackerKnows(l.Snapshot(), t5) && att.attackerKnows(l.Snapshot(), t6) && att.attackerKnows(l.Snapshot(), t7) && att.attackerKnows(l.Snapshot(), t8)
            ExtendKnowledge(l, t1, t2, t3, t4, t5, t6, t7, t8)
        } else if nonDeterministicChoice == 5 {
            // we take an arbitrary term from the attacker knowledge that we'll deconstruct within
            // `ExtendKnowledgeByDeconstruction`:
            t := arb.GetArbTerm()
            assume att.attackerKnows(l.Snapshot(), t)
            ExtendKnowledgeByDeconstruction(l, t)
        } else if nonDeterministicChoice == 6 {
            arbPrincipal := arb.GetArbPrincipal()
            CorruptParticipant(l, arbPrincipal)
        } else if nonDeterministicChoice == 7 {
            arbSession := arb.GetArbId()
            CorruptSession(l, arbSession)
        } else if nonDeterministicChoice == 8 {
            arbSender := arb.GetArbPrincipal()
            arbReceiver := arb.GetArbPrincipal()
            arbMsg := arb.GetArbTerm()
            // we pick an arbitrary message that has been previously sent:
            assume l.Snapshot().messageOccurs(arbSender, arbReceiver, arbMsg)
            DropMessage(l, arbSender, arbReceiver, arbMsg)
        } else if nonDeterministicChoice == 9 {
            arbSender := arb.GetArbPrincipal()
            arbReceiver := arb.GetArbPrincipal()
            Recv(l, arbSender, arbReceiver)
        }
    }
}

// operation 1: create nonce
ghost
requires l.Mem()
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), nonce)
func CreateNonce(l *ll.LabeledLibrary, usageString string) (nonce tm.Term, err error) {
    unfold l.Mem()
    var nonceB lib.ByteString
    nonceB, err = l.s.CreateNonce(tri.GetLabeling(l.ctx), label.Public(), 0/1, 0, usageString, set[ev.EventType]{})
    if err == nil {
        nonce = tm.random(lib.Abs(nonceB), label.Public(), u.Nonce(usageString))
        l.manager.LogNonce(l.ctx, l.owner, false, nonce) 
        fold l.Mem()
        l.Publish(nonce)
    } else {
        fold l.Mem()
    }
}

// operation 2: send message
ghost
requires l.Mem()
requires att.attackerKnows(l.Snapshot(), msg)
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> l.Snapshot().isMessageAt(idSender, idReceiver, msg)
func Send(l *ll.LabeledLibrary, idSender, idReceiver p.Principal, msg tm.Term) (err error) {
    msgBytes := lib.NewByteStringWithContent(tm.gamma(msg))
    l.AttackerOnlyKnowsPublishableValues(msg)
    unfold l.Mem()
    l.manager.LogSend(l.ctx, l.owner, idSender, idReceiver, msg)
    snapshot := l.manager.Snapshot(l.ctx, l.owner)
    err = l.com.Send(idSender, idReceiver, msgBytes, msg, snapshot)
	fold l.Mem()
}

/**
 * operation 3: root entry -- the attacker cannot add this to the trace because there is only
 * a unique one at the root of the trace. We demonstrate in the NSL case study as part of
 * proving initialization code (i.e. authentic key distribution and creation of the trace by
 * appending a root entry) that the root entry satisfies the trace invariant.
 */

// operation 4: extend attacker knowledge
ghost
requires l.Mem()
requires att.attackerKnows(l.Snapshot(), t1)
requires att.attackerKnows(l.Snapshot(), t2)
requires att.attackerKnows(l.Snapshot(), t3)
requires att.attackerKnows(l.Snapshot(), t4)
requires att.attackerKnows(l.Snapshot(), t5)
requires att.attackerKnows(l.Snapshot(), t6)
requires att.attackerKnows(l.Snapshot(), t7)
requires att.attackerKnows(l.Snapshot(), t8)
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), res)
func ExtendKnowledge(l *ll.LabeledLibrary, t1, t2, t3, t4, t5, t6, t7, t8 tm.Term) (res tm.Term, err error) {
    l.AttackerOnlyKnowsPublishableValues(t1)
    l.AttackerOnlyKnowsPublishableValues(t2)
    l.AttackerOnlyKnowsPublishableValues(t3)
    l.AttackerOnlyKnowsPublishableValues(t4)
    l.AttackerOnlyKnowsPublishableValues(t5)
    l.AttackerOnlyKnowsPublishableValues(t6)
    l.AttackerOnlyKnowsPublishableValues(t7)
    l.AttackerOnlyKnowsPublishableValues(t8)
    
    // we do a non-deterministic choice over which operation to apply / term to construct,
    // which shows that the attacker can perform all of them while maintaining the trace invariant.
    nonDeterministicChoice := arb.GetArbInt()
    // we restrict `nonDeterministicChoice` to be within range of a term type such that we
    // can exhaustively explore all terms:
    {
        arbTerm := arb.GetArbTerm()
        assume nonDeterministicChoice == tm.getTermType(arbTerm)
        assert 0 <= nonDeterministicChoice && nonDeterministicChoice <= 24
    }

    if nonDeterministicChoice == 0 {
        // create nonce
        res, err = CreateNonce(l, arb.GetArbString())
    } else if nonDeterministicChoice == 1 {
        // create tuple2
        l.LabelCtx().tuple2(l.Snapshot(), t1, t2, label.Public())
        res = tm.tuple2(t1, t2)
        l.Publish(res)
    } else if nonDeterministicChoice == 2 {
        // create tuple3
        l.LabelCtx().tuple3(l.Snapshot(), t1, t2, t3, label.Public())
        res = tm.tuple3(t1, t2, t3)
        l.Publish(res)
    } else if nonDeterministicChoice == 3 {
        // create tuple4
        l.LabelCtx().tuple4(l.Snapshot(), t1, t2, t3, t4, label.Public())
        res = tm.tuple4(t1, t2, t3, t4)
        l.Publish(res)
    } else if nonDeterministicChoice == 4 {
        // create tuple5
        l.LabelCtx().tuple5(l.Snapshot(), t1, t2, t3, t4, t5, label.Public())
        res = tm.tuple5(t1, t2, t3, t4, t5)
        l.Publish(res)
    } else if nonDeterministicChoice == 5 {
        // create tuple7
        l.LabelCtx().tuple7(l.Snapshot(), t1, t2, t3, t4, t5, t6, t7, label.Public())
        res = tm.tuple7(t1, t2, t3, t4, t5, t6, t7)
        l.Publish(res)
    } else if nonDeterministicChoice == 6 {
        // create hash
        l.LabelCtx().hash(l.Snapshot(), t1, label.Public())
        res = tm.hash(t1)
        l.Publish(res)
    } else if nonDeterministicChoice == 7 {
        // create kdf1
        l.LabelCtx().kdf(l.Snapshot(), t1, label.Public())
        res = tm.kdf1(t1)
        l.Publish(res)
    } else if nonDeterministicChoice == 8 {
        // create kdf2
        l.LabelCtx().kdf(l.Snapshot(), t1, label.Public())
        res = tm.kdf2(t1)
        l.Publish(res)
    } else if nonDeterministicChoice == 9 {
        // create kdf3
        l.LabelCtx().kdf(l.Snapshot(), t1, label.Public())
        res = tm.kdf3(t1)
        l.Publish(res)
    } else if nonDeterministicChoice == 10 {
        nonDeterministicPkChoice := arb.GetArbInt()
        assume 0 <= nonDeterministicPkChoice && nonDeterministicPkChoice < 3
        
        if nonDeterministicPkChoice == 0 {
            // create pk
            l.LabelCtx().createPk(l.Snapshot(), t1, label.Public())
            res = tm.createPk(t1)
            l.Publish(res)
        } else if nonDeterministicPkChoice == 1 {
            arbUsageString := arb.GetArbString()
            res, err = GeneratePkeKey(l, arbUsageString)
        } else {
            arbUsageString := arb.GetArbString()
            res, err = GenerateDHKey(l, arbUsageString)
        }
    } else if nonDeterministicChoice == 11 {
        shouldEncrypt := arb.GetArbBool()
        if shouldEncrypt {
            // create encrypt
            res, err = Enc(l, t1, t2)
        } else {
            // we also show that decryption is possible:
            res, err = Dec(l, t3, t4)
        }
    } else if nonDeterministicChoice == 12 {
        shouldEncrypt := arb.GetArbBool()
        if shouldEncrypt {
            // create aead
        res, err = AeadEnc(l, t1, t2, t3, t4)
        } else {
            // we also show that decryption is possible:
            res, err = AeadDec(l, t5, t6, t7, t8)
        }
    } else if nonDeterministicChoice == 13 {
        // create const1
        l.LabelCtx().const1(l.Snapshot(), label.Public())
        res = tm.const1()
        l.Publish(res)
    } else if nonDeterministicChoice == 14 {
        // create exp
        l.LabelCtx().exp(l.Snapshot(), t1, t2, label.Public())
        res = tm.exp(t1, t2)
        l.Publish(res)
    } else if nonDeterministicChoice == 15 {
        // create mult
        l.LabelCtx().mult(l.Snapshot(), t1, t2, label.Public())
        res = tm.mult(t1, t2)
        l.Publish(res)
    } else if nonDeterministicChoice == 16 {
        // create string constant
        arbString := arb.GetArbString()
        l.LabelCtx().stringTerm(l.Snapshot(), arbString, label.Public())
        res = tm.stringTerm(arbString)
        l.Publish(res)
    } else if nonDeterministicChoice == 17 {
        // create zero string
        arbLength := arb.GetArbInt()
        l.LabelCtx().zeroString(l.Snapshot(), arbLength, label.Public())
        res = tm.zeroString(arbLength)
        l.Publish(res)
    } else if nonDeterministicChoice == 18 {
        // create integer64
        arbValue := arb.GetArbUInt64()
        l.LabelCtx().integer64(l.Snapshot(), arbValue, label.Public())
        res = tm.integer64(arbValue)
        l.Publish(res)
    } else if nonDeterministicChoice == 19 {
        // create integer32
        arbValue := arb.GetArbUInt32()
        l.LabelCtx().integer32(l.Snapshot(), arbValue, label.Public())
        res = tm.integer32(arbValue)
        l.Publish(res)
    } else if nonDeterministicChoice == 20 {
        // create info term
        l.LabelCtx().infoTerm(l.Snapshot(), label.Public())
        res = tm.infoTerm()
        l.Publish(res)
    } else if nonDeterministicChoice == 21 {
        // create prologue term
        l.LabelCtx().prologueTerm(l.Snapshot(), label.Public())
        res = tm.prologueTerm()
        l.Publish(res)
    } else if nonDeterministicChoice == 22 {
        // create DH generator
        l.LabelCtx().generator(l.Snapshot(), label.Public())
        res = tm.generator()
        l.Publish(res)
    } else if nonDeterministicChoice == 23 {
        shouldSign := arb.GetArbBool()
        if shouldSign {
            // create sign
            res, err = Sign(l, t1, t2)
        } else {
            // we also show that open is possible:
            res, err = Open(l, t3, t4)
        }
    } else if nonDeterministicChoice == 24 {
        // create kdfRatchet
        l.LabelCtx().kdfRatchet(l.Snapshot(), t1, t2, label.Public())
        res = tm.kdfRatchet(t1, t2)
        l.Publish(res)
    } else {
        // sanity check that we have not missed any term by checking that
        // we have covered all term types
        assert nonDeterministicChoice < 0 || 24 < nonDeterministicChoice
        assert false
    }
    return
}

/**
 * with `GeneratePkeKey`, `GenerateDHKey`, `Enc`, `Dec`, `AeadEnc`, and `AeadDec`
 * we show that the attacker can invoke the corresponding cryptographic operations,
 * i.e. satisfy the corresponding preconditions and publish the output's term
 * representation
 */
ghost
requires l.Mem()
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), sk)
func GeneratePkeKey(l *ll.LabeledLibrary, usageString string) (sk tm.Term, err error) {
    unfold l.Mem()
    var skB lib.ByteString
    _, skB, err = l.s.GeneratePkeKey(tri.GetLabeling(l.ctx), label.Public(), 0/1, 0, usageString, set[ev.EventType]{})
    if err == nil {
        sk = tm.random(lib.Abs(skB), label.Public(), u.PkeKey(usageString))
        l.manager.LogNonce(l.ctx, l.owner, false, sk) 
        fold l.Mem()
        l.Publish(sk)
    } else {
        fold l.Mem()
    }
}

ghost
requires l.Mem()
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), sk)
func GenerateDHKey(l *ll.LabeledLibrary, usageString string) (sk tm.Term, err error) {
    unfold l.Mem()
    var skB lib.ByteString
    skB, err = l.s.GenerateDHKey(tri.GetLabeling(l.ctx), label.Public(), 0/1, 0, usageString, set[ev.EventType]{})
    if err == nil {
        sk = tm.random(lib.Abs(skB), label.Public(), u.DhKey(usageString))
        l.manager.LogNonce(l.ctx, l.owner, false, sk) 
        fold l.Mem()
        l.Publish(sk)
    } else {
        fold l.Mem()
    }
}

ghost
requires l.Mem()
requires att.attackerKnows(l.Snapshot(), pk)
requires att.attackerKnows(l.Snapshot(), plaintext)
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), ciphertext)
func Enc(l *ll.LabeledLibrary, pk, plaintext tm.Term) (ciphertext tm.Term, err error) {
    pkBytes := lib.NewByteStringWithContent(tm.gamma(pk))
    plaintextBytes := lib.NewByteStringWithContent(tm.gamma(plaintext))
    l.AttackerOnlyKnowsPublishableValues(pk)
    l.AttackerOnlyKnowsPublishableValues(plaintext)
    _, err = l.Enc(plaintextBytes, pkBytes, plaintext, pk)
    if err == nil {
        ciphertext = tm.encrypt(plaintext, pk)
        l.Publish(ciphertext)
    }
}

ghost
requires l.Mem()
requires att.attackerKnows(l.Snapshot(), ciphertext)
requires att.attackerKnows(l.Snapshot(), sk)
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), plaintext)
func Dec(l *ll.LabeledLibrary, ciphertext, sk tm.Term) (plaintext tm.Term, err error) {
    skBytes := lib.NewByteStringWithContent(tm.gamma(sk))
    ciphertextBytes := lib.NewByteStringWithContent(tm.gamma(ciphertext))
    l.AttackerOnlyKnowsPublishableValues(ciphertext)
    l.AttackerOnlyKnowsPublishableValues(sk)
    skOwner := arb.GetArbId()
    l.LabelCtx().CanDecryptWithPublicSk(l.Snapshot(), ciphertext, sk, skOwner)
    l.LabelCtx().FlowsToPublicCanFlow(l.Snapshot(), l.LabelCtx().GetLabel(sk), label.Readers(set[p.Id]{ l.Owner() })) // If the attacker knows sk, then it is publishable, so it flows to the owner -> we are necessarily in the unversioned decryption case
    _, err = l.Dec(ciphertextBytes, skBytes, 0/1, ciphertext, sk, skOwner)
    if err != nil {
        return
    }
    optPlaintext := tm.decrypt(ciphertext, sk)
    if optPlaintext == none[tm.Term] {
        // the attacker can use the labeled decryption function
        // however, the attacker will only obtain guarantees on the byte-level.
        // we model the attacker to operate on symbolic terms.
        // thus, we additionally call decrypt on the term-level and abort
        // if decryption fails
        err = lib.NewError("decryption failed")
        return
    }
    plaintext = get(optPlaintext)
    l.LabelCtx().PlaintextIsPublishableForPublicSk(l.Snapshot(), plaintext, sk, skOwner)
    l.Publish(plaintext)
}

ghost
requires l.Mem()
requires att.attackerKnows(l.Snapshot(), key)
requires att.attackerKnows(l.Snapshot(), nonce)
requires att.attackerKnows(l.Snapshot(), plaintext)
requires att.attackerKnows(l.Snapshot(), additionalData)
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), ciphertext)
func AeadEnc(l *ll.LabeledLibrary, key, nonce, plaintext, additionalData tm.Term) (ciphertext tm.Term, err error) {
    keyBytes := lib.NewByteStringWithContent(tm.gamma(key))
    nonceBytes := lib.NewByteStringWithContent(tm.gamma(nonce))
    plaintextBytes := lib.NewByteStringWithContent(tm.gamma(plaintext))
    additionalDataBytes := lib.NewByteStringWithContent(tm.gamma(additionalData))
    l.AttackerOnlyKnowsPublishableValues(key)
    l.AttackerOnlyKnowsPublishableValues(nonce)
    l.AttackerOnlyKnowsPublishableValues(plaintext)
    l.AttackerOnlyKnowsPublishableValues(additionalData)
    if lib.Size(keyBytes) != 32 || lib.Size(nonceBytes) != 12 {
        err = lib.NewError("key or nonce have invalid length")
        return
    }
    _, err = l.AeadEnc(keyBytes, nonceBytes, plaintextBytes, additionalDataBytes, key, nonce, plaintext, additionalData, label.Public())
    if err == nil {
        ciphertext = tm.aead(key, nonce, plaintext, additionalData)
        l.Publish(ciphertext)
    }
}

ghost
requires l.Mem()
requires att.attackerKnows(l.Snapshot(), key)
requires att.attackerKnows(l.Snapshot(), nonce)
requires att.attackerKnows(l.Snapshot(), ciphertext)
requires att.attackerKnows(l.Snapshot(), additionalData)
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), plaintext)
func AeadDec(l *ll.LabeledLibrary, key, nonce, ciphertext, additionalData tm.Term) (plaintext tm.Term, err error) {
    keyBytes := lib.NewByteStringWithContent(tm.gamma(key))
    nonceBytes := lib.NewByteStringWithContent(tm.gamma(nonce))
    ciphertextBytes := lib.NewByteStringWithContent(tm.gamma(ciphertext))
    additionalDataBytes := lib.NewByteStringWithContent(tm.gamma(additionalData))
    l.AttackerOnlyKnowsPublishableValues(key)
    l.AttackerOnlyKnowsPublishableValues(nonce)
    l.AttackerOnlyKnowsPublishableValues(ciphertext)
    l.AttackerOnlyKnowsPublishableValues(additionalData)
    if lib.Size(keyBytes) != 32 || lib.Size(nonceBytes) != 12 {
        err = lib.NewError("key or nonce have invalid length")
        return
    }
    l.LabelCtx().CanAeadDecryptWithPublishableKey(l.Snapshot(), key, nonce, ciphertext, additionalData, label.Public())
    l.LabelCtx().FlowsToPublicCanFlow(l.Snapshot(), l.LabelCtx().GetLabel(key), label.Readers(set[p.Id]{ l.Owner() })) // If the attacker knows sk, then it is publishable, so it flows to the owner -> we are necessarily in the unversioned decryption case
    _, err = l.AeadDec(keyBytes, nonceBytes, ciphertextBytes, additionalDataBytes, 0/1, key, nonce, ciphertext, additionalData, label.Public())
    if err != nil {
        return
    }
    optPlaintext := tm.AeadDecrypt(ciphertext, key, nonce, additionalData)
    if optPlaintext == none[tm.Term] {
        // the attacker can use the labeled decryption function
        // however, the attacker will only obtain guarantees on the byte-level.
        // we model the attacker to operate on symbolic terms.
        // thus, we additionally call decrypt on the term-level and abort
        // if decryption fails
        err = lib.NewError("decryption failed")
        return
    }
    plaintext = get(optPlaintext)
    l.LabelCtx().PlaintextIsPublishableForPublishableKey(l.Snapshot(), key, nonce, plaintext, additionalData, label.Public())
    l.Publish(plaintext)
}

ghost
requires l.Mem()
requires att.attackerKnows(l.Snapshot(), msg)
requires att.attackerKnows(l.Snapshot(), sk)
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), signedMsg)
func Sign(l *ll.LabeledLibrary, msg, sk tm.Term) (signedMsg tm.Term, err error) {
    msgBytes := lib.NewByteStringWithContent(tm.gamma(msg))
    skBytes := lib.NewByteStringWithContent(tm.gamma(sk))
    l.AttackerOnlyKnowsPublishableValues(msg)
    l.AttackerOnlyKnowsPublishableValues(sk)
    skOwner := arb.GetArbId()
    _, err = l.Sign(msgBytes, skBytes, msg, sk, skOwner)
    if err == nil {
        signedMsg = tm.sign(msg, sk)
        l.Publish(signedMsg)
    }
}

ghost
requires l.Mem()
requires att.attackerKnows(l.Snapshot(), signedMsg)
requires att.attackerKnows(l.Snapshot(), pk)
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), msg)
func Open(l *ll.LabeledLibrary, signedMsg, pk tm.Term) (msg tm.Term, err error) {
    signedMsgBytes := lib.NewByteStringWithContent(tm.gamma(signedMsg))
    pkBytes := lib.NewByteStringWithContent(tm.gamma(pk))
    l.AttackerOnlyKnowsPublishableValues(signedMsg)
    l.AttackerOnlyKnowsPublishableValues(pk)
    // the following call expects the secret key term corresponding to the provided
    // public key as a ghost argument.
    // we simply pick some term such that this term's corresponding public key has
    // the same byte-level representation as `pk`:
    sk := arb.GetArbTerm()
    assume lib.Abs(pkBytes) == tm.gamma(tm.createPk(sk))
    skOwner := arb.GetArbId()
    _, err = l.Open(signedMsgBytes, pkBytes, signedMsg, sk, skOwner)
    if err != nil {
        return
    }
    optMsg := tm.Open(signedMsg, pk)
    if optMsg == none[tm.Term] {
        // the attacker can use the labeled open function
        // however, the attacker will only obtain guarantees on the byte-level.
        // we model the attacker to operate on symbolic terms.
        // thus, we additionally call open on the term-level and abort
        // if signature verification fails
        err = lib.NewError("signature verification failed")
        return
    }
    msg = get(optMsg)
    l.LabelCtx().UnsignedDataIsPublishableIfSignatureIsPublishable(l.Snapshot(), msg, tm.getSk(pk))
    l.Publish(msg)
}

// operation 5: deconstruct term in the attacker knowledge
ghost
requires l.Mem()
requires att.attackerKnows(l.Snapshot(), t)
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
func ExtendKnowledgeByDeconstruction(l *ll.LabeledLibrary, t tm.Term) {
    l.AttackerOnlyKnowsPublishableValues(t)
    
    // we get a non-deterministic term `t` as input.
    // we case split over all terms that can be deconstructed according to our
    // perfect cryptography assumptions and show that all resulting terms can be
    // added to the attacker knowledge while maintaining the trace invariant.

    t1, t2, t3, t4, t5, t6, t7 := arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm(), arb.GetArbTerm()
    snap := l.Snapshot()

    // random cannot be deconstructed further
    if t == tm.tuple2(t1, t2) {
        l.LabelCtx().untuple2(snap, t1, t2, label.Public())
        MultiPublish(l, seq[tm.Term]{ t1, t2 })
    } else if t == tm.tuple3(t1, t2, t3) {
        l.LabelCtx().untuple3(snap, t1, t2, t3, label.Public())
        MultiPublish(l, seq[tm.Term]{ t1, t2, t3 })
    } else if t == tm.tuple4(t1, t2, t3, t4) {
        l.LabelCtx().untuple4(snap, t1, t2, t3, t4, label.Public())
        MultiPublish(l, seq[tm.Term]{ t1, t2, t3, t4 })
    } else if t == tm.tuple5(t1, t2, t3, t4, t5) {
        l.LabelCtx().untuple5(snap, t1, t2, t3, t4, t5, label.Public())
        MultiPublish(l, seq[tm.Term]{ t1, t2, t3, t4, t5 })
    } else if t == tm.tuple7(t1, t2, t3, t4, t5, t6, t7) {
        l.LabelCtx().untuple7(snap, t1, t2, t3, t4, t5, t6, t7, label.Public())
        MultiPublish(l, seq[tm.Term]{ t1, t2, t3, t4, t5, t6, t7 })
    }

    // we assume hash, kdf1, kdf2, kdf3, kdfRatchet and createPk cannot be deconstructed
    // due to our perfect cryptography assumption.
    
    // we already check the deconstruction of encrypt and aead (if decryption succeeds)
    // as part of `ExtendKnowledge` above

    // const1, stringTerm, zeroString, integer64, integer32, infoTerm, prologueTerm, and generator cannot be further deconstructed to other terms.

    // we assume for mult and exp (which are used for Diffie-Hellman exponentiation) that these cannot be deconstructed either.
}

ghost
requires l.Mem()
requires forall i uint :: { terms[i] } 0 <= i && i < len(terms) ==> l.LabelCtx().IsPublishable(l.Snapshot(), terms[i])
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
func MultiPublish(l *ll.LabeledLibrary, terms seq[tm.Term]) {
    snap := l.Snapshot()

    invariant 0 <= i && i <= len(terms)
    invariant l.Mem()
    invariant forall j uint :: { terms[j] } i <= j && j < len(terms) ==> l.LabelCtx().IsPublishable(snap, terms[j])
    invariant snap.isSuffix(l.Snapshot())
    invariant l.ImmutableState() == old(l.ImmutableState())
    for i := 0; i < len(terms); i++ {
        snap1 := l.Snapshot()
        l.LabelCtx().IsPublishableMonotonic(snap, snap1, terms[i])
        l.Publish(terms[i])
        snap.isSuffixTransitive(snap1, l.Snapshot())
    }
}

// operation 6: participant corruption
ghost
requires l.Mem()
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  p.principalId(principal) in l.Snapshot().getCorruptIds()
ensures  tr.containsCorruptId(l.Snapshot().getCorruptIds(), set[p.Id]{ p.principalId(principal) })
ensures  att.attackerKnows(l.Snapshot(), arbTerm)
func CorruptParticipant(l *ll.LabeledLibrary, principal p.Principal) (arbTerm tm.Term) {
    principalId := p.principalId(principal)
    labelCtx := l.LabelCtx()

    // we show now that we can add an arbitrary term that `principal` can read (i.e. is possibly in its long-term state)
    // to the attacker knowledge after recording the corruption on the trace:
    arbTerm = arb.GetArbTerm()
    assume labelCtx.IsMsg(l.Snapshot(), arbTerm, label.Readers(set[p.Id]{ principalId }))

    unfold l.Mem()
    l.manager.LogCorruption(l.ctx, l.owner, principalId)
    fold l.Mem()

    labelCtx.IsMsgMonotonic(old(l.Snapshot()), l.Snapshot(), arbTerm, label.Readers(set[p.Id]{ principalId }))
    labelCtx.CanFlowTransitive(l.Snapshot(), labelCtx.GetLabel(arbTerm), label.Readers(set[p.Id]{ principalId }), label.Public())
    s1 := l.Snapshot()
    l.Publish(arbTerm)
    s1.getCorruptIdsMonotonic(l.Snapshot())
}

// operation 7: session corruption
ghost
requires l.Mem()
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  sessionId in l.Snapshot().getCorruptIds()
ensures  tr.containsCorruptId(l.Snapshot().getCorruptIds(), set[p.Id]{ sessionId })
ensures  sessionId in l.Snapshot().getCorruptIds()
func CorruptSession(l *ll.LabeledLibrary, sessionId p.Id) (arbTerm tm.Term) {
    labelCtx := l.LabelCtx()

    // we show now that we can add an arbitrary term that `sessionId` can read (i.e. is possibly in its long-term or ephemeral/session state)
    // to the attacker knowledge after recording the corruption on the trace:
    arbTerm = arb.GetArbTerm()
    assume labelCtx.IsMsg(l.Snapshot(), arbTerm, label.Readers(set[p.Id]{ sessionId }))

    unfold l.Mem()
    l.manager.LogCorruption(l.ctx, l.owner, sessionId)
    fold l.Mem()
    
    labelCtx.IsMsgMonotonic(old(l.Snapshot()), l.Snapshot(), arbTerm, label.Readers(set[p.Id]{ sessionId }))
    labelCtx.CanFlowTransitive(l.Snapshot(), labelCtx.GetLabel(arbTerm), label.Readers(set[p.Id]{ sessionId }), label.Public())
    s1 := l.Snapshot()
    l.Publish(arbTerm)
    s1.getCorruptIdsMonotonic(l.Snapshot())
}

// operation 8: drop message
ghost
requires l.Mem()
requires l.Snapshot().messageOccurs(idSender, idReceiver, msg) // only previously sent message can be dropped
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  l.Snapshot().isMessageDroppedAt(idSender, idReceiver, msg)
func DropMessage(l *ll.LabeledLibrary, idSender, idReceiver p.Principal, msg tm.Term) {
    msgBytes := lib.NewByteStringWithContent(tm.gamma(msg))
    l.MessageOccursImpliesMessageInv(idSender, idReceiver, msg)
    unfold l.Mem()
    l.manager.LogMsgDrop(l.ctx, l.owner, idSender, idReceiver, msg)
    // the message drop has been recorded on the trace. A real attacker would now issue some command to the
    // network to perform the actual I/O operation for dropping the message.
	fold l.Mem()
}

// `Recv` shows that the attacker can read messages from the network and also add them
// to its attacker knowledge (similarly to how the attacker adds a term derived by
// function application to its knowledge)
ghost
requires l.Mem()
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  err == nil ==> att.attackerKnows(l.Snapshot(), msg)
func Recv(l *ll.LabeledLibrary, idSender, idReceiver p.Principal) (err error, msg tm.Term) {
    snapshot := l.Snapshot()
    unfold l.Mem()
    _, err, msg = l.com.Receive(idSender, idReceiver, snapshot)
    fold l.Mem()
    ghost if err == nil {
		prev := l.MessageOccursImpliesMessageInv(idSender, idReceiver, msg)
		(tr.getPrev(prev)).isSuffixTransitive(prev, l.Snapshot())
		tri.messageInvTransitive(l.Ctx(), idSender, idReceiver, msg, tr.getPrev(prev), l.Snapshot())
        l.Publish(msg)
	}
}
