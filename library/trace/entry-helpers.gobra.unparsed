package trace


import . github.com/ModularVerification/ReusableVerificationLibrary/event

import github.com/ModularVerification/ReusableVerificationLibrary/label

import p github.com/ModularVerification/ReusableVerificationLibrary/principal

import tm github.com/ModularVerification/ReusableVerificationLibrary/term

import u github.com/ModularVerification/ReusableVerificationLibrary/usage
ghost pure
ensures 0 <= res
decreases _ 
func (entry TraceEntry) traceLen() (res int) {
  return entry.isRoot()?1:1 + getPrev(entry).traceLen()
}

ghost requires t1.isSuffix(t2)
ensures t1.traceLen() <= t2.traceLen()
decreases t2.traceLen() 
func (t1 TraceEntry) traceLenMontonic(t2 TraceEntry) () {
  if t1 != t2 {
    t1.traceLenMontonic(getPrev(t2))
  }
}

ghost pure
ensures t0 == t1 ==> res
ensures !t1.isRoot() && t0 == getPrev(t1) ==> res
decreases t1.traceLen() 
func (t0 TraceEntry) isSuffix(t1 TraceEntry) (res bool) {
  return t0 == t1?true:t1.isRoot()?false:t0.isSuffix(getPrev(t1))
}

ghost requires t1.isSuffix(t2) && t2.isSuffix(t3)
ensures t1.isSuffix(t3)
decreases t3.traceLen() 
func (t1 TraceEntry) isSuffixTransitive(t2 TraceEntry, t3 TraceEntry) () {
  if t2 != t3 {
    t1.isSuffixTransitive(t2, getPrev(t3))
  }
}

ghost pure
decreases  
func (entry TraceEntry) isEventAt(principal p.Principal, ev Event) (bool) {
  return entry.isEvent() && getPrincipal(entry) == principal && getEvent(entry) == ev
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) eventOccurs(principal p.Principal, ev Event) (bool) {
  return entry.isRoot()?false:entry.isEventAt(principal, ev)?true:getPrev(entry).eventOccurs(principal, ev)
}

ghost requires t1.isSuffix(t2)
requires t1.eventOccurs(principal, ev)
ensures t2.eventOccurs(principal, ev)
decreases t2.traceLen() 
func (t1 TraceEntry) eventOccursMonotonic(t2 TraceEntry, principal p.Principal, ev Event) () {
  if t1 != t2 {
    t1.eventOccursMonotonic(getPrev(t2), principal, ev)
  }
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) eventOccursAt(principal p.Principal, ev Event, index int) (bool) {
  return entry.isRoot()?false:entry.isEventAt(principal, ev) && index == entry.traceLen() - 1?true:getPrev(entry).eventOccursAt(principal, ev, index)
}

ghost requires t1.isSuffix(t2)
requires t1.eventOccursAt(principal, ev, index)
ensures t2.eventOccursAt(principal, ev, index)
decreases t2.traceLen() 
func (t1 TraceEntry) eventOccursAtMonotonic(t2 TraceEntry, principal p.Principal, ev Event, index int) () {
  if t1 != t2 {
    t1.eventOccursAtMonotonic(getPrev(t2), principal, ev, index)
  }
}

ghost pure
requires entry.eventOccurs(principal, ev)
decreases entry.traceLen() 
func (entry TraceEntry) eventOccursAtTime(principal p.Principal, ev Event) (int) {
  return entry.isEventAt(principal, ev)?entry.traceLen():getPrev(entry).eventOccursAtTime(principal, ev)
}

ghost requires entry.eventOccursAt(principal, ev, idx)
ensures entry.eventOccurs(principal, ev)
decreases entry.traceLen() 
func (entry TraceEntry) eventOccursAtLemma(principal p.Principal, ev Event, idx int) () {
  if !entry.isEventAt(principal, ev) {
    getPrev(entry).eventOccursAtLemma(principal, ev, idx)
  }
}

ghost requires entry.eventOccurs(principal, ev)
ensures entry.eventOccursAt(principal, ev, res)
ensures res == entry.eventOccursAtTime(principal, ev) - 1
decreases entry.traceLen() 
func (entry TraceEntry) eventOccursAtTimeLemma(principal p.Principal, ev Event) (res int) {
  if entry.isEventAt(principal, ev) {
    res = entry.traceLen() - 1
  } else {
    res = getPrev(entry).eventOccursAtTimeLemma(principal, ev)
  }
  
}

ghost pure
requires entry.eventOccurs(principal, ev)
ensures res.isSuffix(entry)
ensures res.isEventAt(principal, ev)
decreases entry.traceLen() 
func (entry TraceEntry) eventOccursWitness(principal p.Principal, ev Event) (res TraceEntry) {
  return entry.isEventAt(principal, ev)?entry:getPrev(entry).eventOccursWitness(principal, ev)
}

ghost requires t1.isSuffix(t2)
requires t1.eventOccurs(principal, ev)
ensures t2.eventOccurs(principal, ev)
ensures t1.eventOccursWitness(principal, ev).isSuffix(t2.eventOccursWitness(principal, ev))
decreases t2.traceLen() 
func (t1 TraceEntry) eventOccursWitnessMonotonic(t2 TraceEntry, principal p.Principal, ev Event) () {
  if t1 != t2 {
    if t2.isEventAt(principal, ev) {
      t1Witness := t1.eventOccursWitness(principal, ev)
      t1Witness.isSuffixTransitive(t1, t2)
    } else {
      t1.eventOccursWitnessMonotonic(getPrev(t2), principal, ev)
    }
    
  }
}

ghost pure
decreases  
func (entry TraceEntry) isMessageAt(sender p.Principal, receiver p.Principal, payload tm.Term) (bool) {
  return entry.isMessage() && getSender(entry) == sender && getReceiver(entry) == receiver && getPayload(entry) == payload
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) messageOccurs(sender p.Principal, receiver p.Principal, payload tm.Term) (bool) {
  return entry.isRoot()?false:entry.isMessageAt(sender, receiver, payload)?true:getPrev(entry).messageOccurs(sender, receiver, payload)
}

ghost requires t1.isSuffix(t2)
requires t1.messageOccurs(sender, receiver, payload)
ensures t2.messageOccurs(sender, receiver, payload)
decreases t2.traceLen() 
func (t1 TraceEntry) messageOccursMonotonic(t2 TraceEntry, sender p.Principal, receiver p.Principal, payload tm.Term) () {
  if t1 != t2 {
    t1.messageOccursMonotonic(getPrev(t2), sender, receiver, payload)
  }
}

ghost pure
decreases  
func (entry TraceEntry) isMessageDroppedAt(sender p.Principal, receiver p.Principal, payload tm.Term) (bool) {
  return entry.isDropMessage() && getSender(entry) == sender && getReceiver(entry) == receiver && getPayload(entry) == payload
}

ghost pure
decreases  
func (entry TraceEntry) isNonceAt(nonce tm.Term) (bool) {
  return entry.isNonce() && getNonce(entry) == nonce
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) OnlyNonceOccurs(nonce tm.Term) (bool) {
  return entry.isRoot()?false:entry.isNonceAt(nonce)?true:getPrev(entry).OnlyNonceOccurs(nonce)
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) nonceOccurs(nonce tm.Term, l label.SecrecyLabel, usage u.Usage) (res bool) {
  return entry.OnlyNonceOccurs(nonce) && tm.getRandomLabel(nonce) == l && tm.getRandomUsage(nonce) == usage
}

ghost requires t1.isSuffix(t2)
requires t1.OnlyNonceOccurs(nonce)
ensures t2.OnlyNonceOccurs(nonce)
decreases t2.traceLen() 
func (t1 TraceEntry) OnlyNonceOccursMonotonic(t2 TraceEntry, nonce tm.Term) () {
  if t1 != t2 {
    t1.OnlyNonceOccursMonotonic(getPrev(t2), nonce)
  }
}

ghost requires t1.isSuffix(t2)
requires t1.nonceOccurs(nonce, l, usage)
ensures t2.nonceOccurs(nonce, l, usage)
decreases t2.traceLen() 
func (t1 TraceEntry) nonceOccursMonotonic(t2 TraceEntry, nonce tm.Term, l label.SecrecyLabel, usage u.Usage) () {
  t1.OnlyNonceOccursMonotonic(t2, nonce)
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) getPublicTerms() (set[tm.Term]) {
  return entry.isRoot()?getPublicTerms(entry):getPrev(entry).getPublicTerms()
}

ghost requires t1.isSuffix(t2)
ensures t1.getPublicTerms() == t2.getPublicTerms()
decreases t2.traceLen() 
func (t1 TraceEntry) getPublicTermsMonotonic(t2 TraceEntry) () {
  if t1 != t2 {
    t1.getPublicTermsMonotonic(getPrev(t2))
  }
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) getTermsMadePublic() (set[tm.Term]) {
  return (entry.isRoot()?set[tm.Term] { }:getPrev(entry).getTermsMadePublic()) union (entry.isPublic()?set[tm.Term] { getPayload(entry) }:set[tm.Term] { })
}

ghost requires t1.isSuffix(t2)
ensures t1.getTermsMadePublic() subset t2.getTermsMadePublic()
decreases t2.traceLen() 
func (t1 TraceEntry) getTermsMadePublicMonotonic(t2 TraceEntry) () {
  if t1 != t2 {
    t1.getTermsMadePublicMonotonic(getPrev(t2))
  }
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) getCorruptPrincipals() (set[p.Principal]) {
  return (entry.isRoot()?set[p.Principal] { }:getPrev(entry).getCorruptPrincipals()) union (entry.isCorrupt()?set[p.Principal] { getId(entry).getPrincipal() }:set[p.Principal] { })
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) getCorruptIds() (set[p.Id]) {
  return (entry.isRoot()?set[p.Id] { }:getPrev(entry).getCorruptIds()) union (entry.isCorrupt()?set[p.Id] { getId(entry) }:set[p.Id] { })
}

ghost requires t1.isSuffix(t2)
ensures t1.getCorruptIds() subset t2.getCorruptIds()
decreases t2.traceLen() 
func (t1 TraceEntry) getCorruptIdsMonotonic(t2 TraceEntry) () {
  if t1 != t2 {
    t1.getCorruptIdsMonotonic(getPrev(t2))
  }
}

ghost pure
decreases entry.traceLen() 
func (entry TraceEntry) getMessagePayloads() (set[tm.Term]) {
  return (entry.isRoot()?set[tm.Term] { }:getPrev(entry).getMessagePayloads()) union (entry.isMessage()?set[tm.Term] { getPayload(entry) }:set[tm.Term] { })
}

ghost requires t1.isSuffix(t2)
ensures t1.getMessagePayloads() subset t2.getMessagePayloads()
decreases t2.traceLen() 
func (t1 TraceEntry) getMessagePayloadsMonotonic(t2 TraceEntry) () {
  if t1 != t2 {
    t1.getMessagePayloadsMonotonic(getPrev(t2))
  }
}

ghost requires msg in entry.getMessagePayloads()
ensures entry.messageOccurs(sender, receiver, msg)
decreases entry.traceLen() 
func (entry TraceEntry) getMsgSenderReceiver(msg tm.Term) (sender p.Principal, receiver p.Principal) {
  if entry.isMessage() && getPayload(entry) == msg {
    sender = getSender(entry)
    receiver = getReceiver(entry)
  } else {
    sender, receiver = getPrev(entry).getMsgSenderReceiver(msg)
  }
  
}

ghost pure
ensures forall msg: tm.Term :: {msg in res} msg in res ==> entry.messageOccurs(sender, receiver, msg)
decreases entry.traceLen() 
func (entry TraceEntry) getMessagePayloadsForCommChannel(sender p.Principal, receiver p.Principal) (res set[tm.Term]) {
  return (entry.isRoot()?set[tm.Term] { }:getPrev(entry).getMessagePayloadsForCommChannel(sender, receiver)) union (entry.isMessage() && getSender(entry) == sender && getReceiver(entry) == receiver?set[tm.Term] { getPayload(entry) }:set[tm.Term] { })
}

ghost pure
decreases  
func containsCorruptId(corruptIds set[p.Id], ids set[p.Id]) (bool) {
  return exists corruptedId: p.Id :: {containsId(ids, corruptedId)} corruptedId in corruptIds && containsId(ids, corruptedId)
}

ghost pure
decreases  
func containsId(ids set[p.Id], corruptedId p.Id) (bool) {
  return exists id: p.Id :: {id.Covers(corruptedId)} id in ids && id.Covers(corruptedId)
}
